///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum Tristate : int
{
    Undefined = (-true),        //<!
    True = true,                //<!
    False = false               //<!
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param os
/// \param state
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& os, const Tristate& state);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param state
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool operator!(const Tristate& state);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param state
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
Tristate operator~(const Tristate& state);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
Tristate operator&(const Tristate& lhs, const Tristate& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
Tristate operator|(const Tristate& lhs, const Tristate& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
Tristate operator^(const Tristate& lhs, const Tristate& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
Tristate& operator&=(Tristate& lhs, const Tristate& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
Tristate& operator|=(Tristate& lhs, const Tristate& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
Tristate& operator^=(Tristate& lhs, const Tristate& rhs);

} // namespace nts
