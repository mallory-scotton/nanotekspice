///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "AComponent.hpp"
#include "Gates/And.hpp"
#include "Gates/Nand.hpp"
#include "Gates/Xor.hpp"
#include "Gates/Or.hpp"
#include "Gates/Nor.hpp"
#include <array>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts::Components
///////////////////////////////////////////////////////////////////////////////
namespace nts::Components
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam GateType
///
///////////////////////////////////////////////////////////////////////////////
template <typename GateType>
class QuadGate : public AComponent
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::array<GateType, 4> m_gates;
    bool m_initialized;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    QuadGate(const std::string& name);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void initializeLinks(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param simulate
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    void simulate(size_t tick) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Tristate compute(size_t pin) override;
};

///////////////////////////////////////////////////////////////////////////////
// Explicit instantiations of QuadGate for each required Gate type
///////////////////////////////////////////////////////////////////////////////
template class QuadGate<nts::Gates::Nor>;
template class QuadGate<nts::Gates::Nand>;
template class QuadGate<nts::Gates::Xor>;
template class QuadGate<nts::Gates::Or>;
template class QuadGate<nts::Gates::And>;

///////////////////////////////////////////////////////////////////////////////
// Type definitions for specific quad gate components
///////////////////////////////////////////////////////////////////////////////
using C4001 = QuadGate<nts::Gates::Nor>;
using C4011 = QuadGate<nts::Gates::Nand>;
using C4030 = QuadGate<nts::Gates::Xor>;
using C4071 = QuadGate<nts::Gates::Or>;
using C4081 = QuadGate<nts::Gates::And>;

} // namespace nts::Components
