///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "AComponent.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace nts::Components
///////////////////////////////////////////////////////////////////////////////
namespace nts::Components
{

///////////////////////////////////////////////////////////////////////////////
/// \brief 12-bit Binary Counter (4040)
///////////////////////////////////////////////////////////////////////////////
class C4094 : public AComponent
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Internal counter logic
    ///////////////////////////////////////////////////////////////////////////
    Tristate m_lastClock;
    uint8_t m_shiftRegister;
    uint8_t m_storageRegister;
    Tristate m_lastStrobe;
    Tristate m_serialOut;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// \param name Component name
    ///////////////////////////////////////////////////////////////////////////
    C4094(const std::string& name);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Simulate function
    ///
    /// \param tick Simulation tick
    ///////////////////////////////////////////////////////////////////////////
    void simulate(size_t tick) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Compute function
    ///
    /// \param pin Pin number
    /// \return Tristate logic value
    ///////////////////////////////////////////////////////////////////////////
    Tristate compute(size_t pin) override;
};

} // namespace nts::Components