///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2025 TekyoDrift
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IComponent.hpp"
#include <string>
#include <vector>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class AComponent : public IComponent
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Type alias
    ///////////////////////////////////////////////////////////////////////////
    using Link = std::pair<IComponent*, size_t>;

protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected properties
    ///////////////////////////////////////////////////////////////////////////
    std::string m_name;                                     //<!
    std::vector<Link> m_links;                              //<!
    Tristate m_state;                                       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AComponent(const std::string& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param size
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AComponent(const std::string& name, size_t size);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    /// \param other
    /// \param otherPin
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setLink(size_t pin, IComponent& other, size_t otherPin) override;
};

} // namespace nts
