///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Clock.hpp"
#include "Errors/OutOfRangePinException.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace nts::Specials
///////////////////////////////////////////////////////////////////////////////
namespace nts::Specials
{

///////////////////////////////////////////////////////////////////////////////
Clock::Clock(const std::string& name)
    : AComponent(name, 1)
    , m_hasSimulated(false)
{
    m_pins[0] = Pin(Pin::Type::OUTPUT);
}

///////////////////////////////////////////////////////////////////////////////
void Clock::setValue(Tristate value)
{
    m_pins[0].setState(value);
}

///////////////////////////////////////////////////////////////////////////////
void Clock::simulate(size_t tick)
{
    if (m_tick == tick)
        return;
    m_tick = tick;
    if (m_hasSimulated)
        m_pins[0].setState(~(m_pins[0].getState()));
    m_hasSimulated = true;
}

///////////////////////////////////////////////////////////////////////////////
Tristate Clock::compute(size_t pin)
{
    if (pin >= m_pins.size())
        throw OutOfRangePinException();
    return (m_pins[0].getState());
}

} // namespace nts::Specials
