///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IComponent.hpp"
#include <unordered_map>
#include <functional>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namesapce nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief Factory class for creating components
///
///////////////////////////////////////////////////////////////////////////////
class Factory
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Map of component type to factory function
    ///////////////////////////////////////////////////////////////////////////
    std::unordered_map<
        std::string,                                    //<! Component type
        std::function<
            std::shared_ptr<IComponent>                 //<! Factory function
            (const std::string&)                        //<! Component
        >                                               //<! Name
    > m_factories;                                      //<! Factory map

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor that registers component types
    ///
    ///////////////////////////////////////////////////////////////////////////
    Factory(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Creates a component of the specified type
    ///
    /// \param type The type of the component to create
    /// \param name The name of the component
    ///
    /// \return A unique pointer to the created component
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::shared_ptr<IComponent> createComponent(
        const std::string& type,
        const std::string& name
    );

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Registers a component type with the factory
    ///
    /// \tparam T The component type to register
    ///
    /// \param type The type string for the component
    ///
    ///////////////////////////////////////////////////////////////////////////
    template<typename T>
    void registerComponent(const std::string& type)
    {
        m_factories[type] = [](const std::string& name) ->
            std::shared_ptr<IComponent> {
                return std::make_shared<T>(name);
            };
    }
};

} // namespace nts
