///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IComponent.hpp"
#include "Factory.hpp"
#include <memory>
#include <unordered_map>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Circuit
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Type alias
    ///////////////////////////////////////////////////////////////////////////
    using Component = std::shared_ptr<IComponent>;
    using ComponentMap = std::unordered_map<std::string, Component>;
    using PendingMap = std::unordered_map<std::string, Tristate>;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private properties
    ///////////////////////////////////////////////////////////////////////////
    Factory m_factory;              //<!
    PendingMap m_pendingInputs;     //<!
    ComponentMap m_components;      //<!
    size_t m_tick{0};               //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Component getComponent(const std::string& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void displayInputs(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void displayOutputs(void) const;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addComponent(const std::string& type, const std::string& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component1
    /// \param pin1
    /// \param component2
    /// \param pin2
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setLink(
        const std::string& component1,
        size_t pin1,
        const std::string& component2,
        std::size_t pin2
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void simulate(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setValue(const std::string& name, Tristate value);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void display(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const ComponentMap& getComponents(void) const;

#ifdef NTS_BONUS
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param target
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget& target);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param target
    ///
    ///////////////////////////////////////////////////////////////////////////
    void drawLinks(sf::RenderTarget& target);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void positionComponents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    Component getComponentAt(const sf::Vector2f& position);
#endif
};

} // namespace nts
