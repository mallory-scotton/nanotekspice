///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "AComponent.hpp"
#include "Gates/Not.hpp"
#include <array>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts::Sequencials
///////////////////////////////////////////////////////////////////////////////
namespace nts::Sequencials
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class FlipFlop : public AComponent
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Private properties
    ///////////////////////////////////////////////////////////////////////////
    Tristate m_lastClock;       //<!
    Tristate m_q1state;         //<!
    Tristate m_q2state;         //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    FlipFlop(const std::string& name);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param simulate
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    void simulate(size_t tick) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Tristate compute(size_t pin) override;
};

} // namespace nts::Sequencials
