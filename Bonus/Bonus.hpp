///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IComponent.hpp"
#include "Shell/Circuit.hpp"
#include "Shell/Parser.hpp"
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Bonus
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    sf::Clock m_clock;                      //<!
    sf::RenderWindow m_window;              //<!
    Circuit m_circuit;                      //<!
    std::vector<std::string> m_files;       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Bonus(const char* filename);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Bonus();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void useDockSpace(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    ///////////////////////////////////////////////////////////////////////////
    void handleEvent(const sf::Event::Closed&);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    void handleEvent(const T&)
    {}

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void run(void);
};

} // namespace nts
