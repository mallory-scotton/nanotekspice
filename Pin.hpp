///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Tristate.hpp"
#include "IComponent.hpp"
#include <list>
#include <memory>
#include <vector>
#include <string>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct Link
{
    std::weak_ptr<IComponent> component;    //<!
    size_t pin;                             //<!
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Pin
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Custom type alias for pin type
    ///////////////////////////////////////////////////////////////////////////
    enum class Type
    {
        INPUT,
        OUTPUT,
        ELECTRICAL
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private properties
    ///////////////////////////////////////////////////////////////////////////
    std::vector<Link> m_links;  //<!
    Tristate m_state;           //<!
    Type m_type;                //<!
    std::string m_name;         //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Pin(Type type = Type::INPUT, const std::string& name = "");

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setState(Tristate state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Tristate getState(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    /// \param pin
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addLink(const std::shared_ptr<IComponent>& component, size_t pin);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    /// \param pin
    ///
    ///////////////////////////////////////////////////////////////////////////
    void removeLink(const std::shared_ptr<IComponent>& component, size_t pin);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const std::vector<Link>& getLinks(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Type getType(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clearLinks(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::string getName(void) const;
};

} // namespace nts
