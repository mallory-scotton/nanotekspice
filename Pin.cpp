///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Pin.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
Pin::Pin(Pin::Type type)
    : m_state(Tristate::Undefined)
    , m_type(type)
{}

///////////////////////////////////////////////////////////////////////////////
void Pin::setState(Tristate state)
{
    m_state = state;
}

///////////////////////////////////////////////////////////////////////////////
Tristate Pin::getState(void) const
{
    return (m_state);
}

///////////////////////////////////////////////////////////////////////////////
void Pin::addLink(const std::shared_ptr<IComponent>& component, size_t pin)
{
    m_links.emplace_back(component, pin);
}

///////////////////////////////////////////////////////////////////////////////
const std::vector<Link>& Pin::getLinks(void) const
{
    return (m_links);
}

///////////////////////////////////////////////////////////////////////////////
Pin::Type Pin::getType(void) const
{
    return (m_type);
}

///////////////////////////////////////////////////////////////////////////////
void Pin::clearLinks(void)
{
    m_links.clear();
}

} // namespace nts
