///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Pin.hpp"
#include <algorithm>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
Pin::Pin(Pin::Type type, const std::string& name)
    : m_state(Tristate::Undefined)
    , m_type(type)
    , m_name(name)
{}

///////////////////////////////////////////////////////////////////////////////
void Pin::setState(Tristate state)
{
    m_state = state;
}

///////////////////////////////////////////////////////////////////////////////
Tristate Pin::getState(void) const
{
    return (m_state);
}

///////////////////////////////////////////////////////////////////////////////
void Pin::addLink(const std::shared_ptr<IComponent>& component, size_t pin)
{
    m_links.emplace_back(component, pin);
}

///////////////////////////////////////////////////////////////////////////////
void Pin::removeLink(const std::shared_ptr<IComponent>& component, size_t pin)
{
    auto it = std::find_if(m_links.begin(), m_links.end(),
        [&component, pin](const Link& link) {
            auto linkComponent = link.component.lock();
            return (
                linkComponent &&
                linkComponent == component &&
                link.pin == pin
            );
        }
    );

    if (it != m_links.end()) {
        m_links.erase(it);
    }
}

///////////////////////////////////////////////////////////////////////////////
const std::vector<Link>& Pin::getLinks(void) const
{
    return (m_links);
}

///////////////////////////////////////////////////////////////////////////////
Pin::Type Pin::getType(void) const
{
    return (m_type);
}

///////////////////////////////////////////////////////////////////////////////
void Pin::clearLinks(void)
{
    m_links.clear();
}

///////////////////////////////////////////////////////////////////////////////
std::string Pin::getName(void) const
{
    return (m_name);
}

} // namespace nts
