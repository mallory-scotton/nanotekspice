///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Tristate.hpp"
#include <iostream>
#include <memory>

#ifdef NTS_BONUS
    #include <SFML/Graphics.hpp>
    #include <SFML/System.hpp>
    #include <SFML/Window.hpp>
#endif

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
// Pre-definition of pin class
///////////////////////////////////////////////////////////////////////////////
class Pin;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class IComponent
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~IComponent() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param tick
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void simulate(size_t tick) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Tristate compute(size_t pin) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    /// \param other
    /// \param otherPin
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void setLink(
        size_t pin,
        std::shared_ptr<IComponent> other,
        size_t otherPin
    ) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const std::string getName(void) const = 0;

#ifdef NTS_BONUS
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual size_t getPinCount(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param idx
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const Pin& getPin(size_t idx) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set component position
    ///
    /// \param position New position
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void setPosition(const sf::Vector2f& position) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get component position
    ///
    /// \return Current position
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual sf::Vector2f getPosition() const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get component size
    ///
    /// \return Component size
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual sf::Vector2f getSize() const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get pin position
    ///
    /// \param pin Pin index
    /// \return Position of the pin in global coordinates
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual sf::Vector2f getPinPosition(size_t pin) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if component position was manually set
    ///
    /// \return True if position was set manually
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool isPositionSet(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void updatePinPositions(void) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param target
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target) const = 0;
#endif
};

} // namespace nts
