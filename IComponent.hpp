///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Tristate.hpp"
#include <iostream>
#include <memory>
#include <vector>

#define NTS_BONUS

#ifdef NTS_BONUS
    #define IMGUI_DEFINE_MATH_OPERATORS
    #include <imgui.h>
    #include <imgui_internal.h>
    #include <imgui-SFML.h>
    #include <ImNodes.h>
    #include <ImNodesEz.h>

///////////////////////////////////////////////////////////////////////////////
namespace Ez = ImNodes::Ez;

#endif

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
// Pre-definition of pin class
///////////////////////////////////////////////////////////////////////////////
class Pin;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class IComponent
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~IComponent() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param tick
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void simulate(size_t tick) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Tristate compute(size_t pin) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    /// \param other
    /// \param otherPin
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void setLink(
        size_t pin,
        std::shared_ptr<IComponent> other,
        size_t otherPin
    ) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const std::string getName(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::vector<Pin>& getPins(void) = 0;

#ifdef NTS_BONUS
    //////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    //////////////////////////////////////////////////////////////////////////
    virtual std::string getCleanClassName(void) const = 0;

    //////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    //////////////////////////////////////////////////////////////////////////
    virtual bool isSelected(void) const = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void draw(void) = 0;
#endif
};

} // namespace nts
