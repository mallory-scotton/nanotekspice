///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IComponent.hpp"
#include "Pin.hpp"
#include <string>
#include <vector>
#include <stdexcept>
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class AComponent :
    public std::enable_shared_from_this<AComponent>,
    public IComponent
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected properties
    ///////////////////////////////////////////////////////////////////////////
    std::string m_name;                         //<!
    std::vector<Pin> m_pins;                    //<!
    size_t m_tick;                              //<!
#ifdef NTS_BONUS
    bool m_pinsInitialized = false;             //<!
    std::vector<std::string> m_pinLabels;       //<!
    std::vector<Ez::SlotInfo> m_inputs;         //<!
    std::vector<Ez::SlotInfo> m_outputs;        //<!
    bool m_selected;                            //<!
public:
    ImVec2 m_position;                          //<!
#endif

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param size
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AComponent(const std::string& name, size_t count);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    /// \param other
    /// \param otherPin
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setLink(
        size_t pin,
        std::shared_ptr<IComponent> other,
        size_t otherPin
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param tick
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void simulate(size_t tick) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const std::string getName(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::vector<Pin>& getPins(void) override;

#ifdef NTS_BONUS
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cls
    ///
    ///////////////////////////////////////////////////////////////////////////
    void applyColors(const std::string& cls) const;

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void innerDraw(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::string getCleanClassName(void) const override;

    //////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    //////////////////////////////////////////////////////////////////////////
    virtual bool isSelected(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void draw(void) override;
#endif

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void propagateOutput(size_t pin, Tristate state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Tristate getInputState(size_t pin);
};

} // namespace nts
