///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IComponent.hpp"
#include "Pin.hpp"
#include <string>
#include <vector>
#include <stdexcept>
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
// Namespace nts
///////////////////////////////////////////////////////////////////////////////
namespace nts
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class AComponent :
    public std::enable_shared_from_this<AComponent>,
    public IComponent
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected properties
    ///////////////////////////////////////////////////////////////////////////
    std::string m_name;                         //<!
    std::vector<Pin> m_pins;                    //<!
    size_t m_tick;                              //<!
#ifdef NTS_BONUS
    sf::Vector2f m_position;                    //<!
    sf::Vector2f m_size;                        //<!
    std::vector<sf::Vector2f> m_pinPositions;   //<!
    bool m_positionSet = false;                 //<!
#endif

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param size
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AComponent(const std::string& name, size_t count);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    /// \param other
    /// \param otherPin
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setLink(
        size_t pin,
        std::shared_ptr<IComponent> other,
        size_t otherPin
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param tick
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void simulate(size_t tick) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const std::string getName(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual std::vector<Pin>& getPins(void) override;

#ifdef NTS_BONUS
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual size_t getPinCount(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param idx
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const Pin& getPin(size_t idx) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set component position
    ///
    /// \param position New position
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void setPosition(const sf::Vector2f& position) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get component position
    ///
    /// \return Current position
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual sf::Vector2f getPosition(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get component size
    ///
    /// \return Component size
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual sf::Vector2f getSize(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get pin position
    ///
    /// \param pin Pin index
    /// \return Position of the pin in global coordinates
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual sf::Vector2f getPinPosition(size_t pin) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if component position was manually set
    ///
    /// \return True if position was set manually
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool isPositionSet(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void updatePinPositions(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param target
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target) const override;
#endif

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void propagateOutput(size_t pin, Tristate state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Tristate getInputState(size_t pin);
};

} // namespace nts
